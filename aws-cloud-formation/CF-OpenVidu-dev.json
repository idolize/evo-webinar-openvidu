{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deploying OpenVidu Server over AWS",
  "Parameters": {
    "KeyName": {
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instance",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "must be the name of an existing EC2 KeyPair."
    },
    "InstanceType": {
      "Description": "Demos Machine EC2 instance type",
      "Type": "String",
      "Default": "t2.xlarge",
      "AllowedValues": [
        "t2.large",
            "t2.xlarge",
            "t2.2xlarge",
            "m5.xlarge",
            "m5.2xlarge",
            "m5.4xlarge",
            "m5.12xlarge",
            "m5.24xlarge",
            "m4.xlarge",
            "m4.2xlarge",
            "m4.4xlarge",
            "m4.10xlarge",
            "m4.16xlarge",
            "c5.xlarge",
            "c5.2xlarge",
            "c5.4xlarge",
            "c5.9xlarge",
            "c5d.xlarge",
            "c5d.2xlarge",
            "c4.xlarge",
            "c4.2xlarge",
            "c4.4xlarge",
            "c4.8xlarge"
      ],
      "ConstraintDescription": "must be a valid EC2 instance type."
    },
    "MyDomainName": {
      "Description": "For example: openvidu.io",
      "Type": "String"
    },
    "PublicElasticIP": {
      "Description": "In case you want to use Let's Encrypt, the Elastic IP you generated",
      "Type": "String"
    },
    "OpenViduSecret": {
      "Description": "Secret to connect to your OpenVidu Server. No whitespaces or quotations allowed. If you deploy the demos the password must be MY_SECRET or the demos won't be able to connect to server.",
      "Type": "String",
      "Default": "MY_SECRET",
      "AllowedPattern": "^((?!\")(?! ).)*$",
      "NoEcho": true
    },
    "WhichCert": {
      "Description": "You can choose from the list below which certificate to use",
      "Type": "String",
      "Default": "selfsigned",
      "AllowedValues": [
        "selfsigned",
        "letsencrypt",
        "owncert"
      ]
    },
    "LetsEncryptEmail": {
      "Description": "Email necesary for Let's Encrypt notifications",
      "Type": "String"
    },
    "OwnCertCRT": {
      "Description": "Copy and paste CRT file content here",
      "Type": "String"
    },
    "OwnCertKEY": {
      "Description": "Copy and paste KEY file content here",
      "Type": "String"
    },
    "WantToSendInfo": {
      "Description": "Do you agree to send anonymous information to OpenVidu Team for statistics",
      "Type": "String",
      "Default": "true",
      "AllowedValues": ["true", "false"]
    },
    "FreeHTTPAccesToRecordingVideos": {
      "Description": "Do you want your recordings to be access publicly?",
      "Type": "String",
      "Default": "false",
      "AllowedValues": ["true", "false"]
    },
    "OpenviduRecordingNotification": {
      "Description": "Which users should receive the recording events in the client side (recordingStarted, recordingStopped).",
      "Type": "String",
      "Default": "publisher_moderator",
      "AllowedValues": [ "all", "publisher_moderator", "moderator", "none"]
    },
    "OpenviduStreamsVideoMaxRecvBandwidth": {
      "Description": "Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained",
      "Type": "String",
      "Default": "1000"
    },
    "OpenviduStreamsVideoMinRecvBandwidth": {
      "Description": "Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0 means unconstrained",
      "Type": "String",
      "Default": "300"
    },    
    "OpenviduStreamsVideoMaxSendBandwidth": {
      "Description": "Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained",
      "Type": "String",
      "Default": "1000"
    },
    "OpenviduStreamsVideoMinSendBandwidth": {
      "Description": "Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0 means unconstrained",
      "Type": "String",
      "Default": "300"
    },
    "WantToDeployDemos": {
      "Description": "Choose if you want to deploy practical examples of OpenVidu functionality.",
      "Type": "String",
      "AllowedValues": [ "true", "false" ],
      "Default": "false"
    }
  },
  "Mappings": {
  "RegionMap": {
    "ap-south-1": {
      "AMI1": "ami-0c6c52d7cf1004825"
    },
    "eu-west-3": {
      "AMI1": "ami-0b26151106502588d"
    },
    "eu-west-2": {
      "AMI1": "ami-06f77073d7dc4c48a"
    },
    "eu-west-1": {
      "AMI1": "ami-00b36349b3dba2ec3"
    },
    "ap-northeast-2": {
      "AMI1": "ami-0035936492be04cff"
    },
    "ap-northeast-1": {
      "AMI1": "ami-06317ca3b39714f7e"
    },
    "sa-east-1": {
      "AMI1": "ami-0f7c76bfc85e5b4ea"
    },
    "ca-central-1": {
      "AMI1": "ami-0a5443ed7b0a45901"
    },
    "ap-southeast-1": {
      "AMI1": "ami-0d97809b54a5f01ba"
    },
    "ap-southeast-2": {
      "AMI1": "ami-05162512c82cb460f"
    },
    "eu-central-1": {
      "AMI1": "ami-0dd0be70cc0d493b7"
    },
    "us-east-1": {
      "AMI1": "ami-0735ea082a1534cac"
    },
    "us-east-2": {
      "AMI1": "ami-04c305e118636bc7d"
    },
    "us-west-1": {
      "AMI1": "ami-0f5113ce7686689e9"
    },
    "us-west-2": {
      "AMI1": "ami-01e0cf6e025c036e4"
    }
  }
},
  "Metadata": {
    "AWS::CloudFormation::Interface": {
      "ParameterGroups": [{
          "Label": {
            "default": "SSL Certificate Configuration"
          },
          "Parameters": [
            "WhichCert",
            "LetsEncryptEmail",
            "MyDomainName",
            "PublicElasticIP",
            "OwnCertCRT",
            "OwnCertKEY"
          ]
        },
        {
          "Label": {
            "default": "OpenVidu Configuration"
          },
          "Parameters": [
            "OpenViduSecret",
            "FreeHTTPAccesToRecordingVideos",
            "OpenviduRecordingNotification",
            "OpenviduStreamsVideoMaxRecvBandwidth",
            "OpenviduStreamsVideoMinRecvBandwidth",
            "OpenviduStreamsVideoMaxSendBandwidth",
            "OpenviduStreamsVideoMinSendBandwidth",
            "WantToDeployDemos"
          ]
        }
      ]
    }
  },
  "Conditions": {
    "NoSelfSigned": {
      "Fn::Not": [{
        "Fn::Equals": [{
            "Ref": "WhichCert"
          },
          "selfsigned"
        ]
      }]
    }
  },
  "Resources": {
    "WebServerInstance": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {
          "Fn::FindInMap": [
            "RegionMap",
            {
              "Ref": "AWS::Region"
            },
            "AMI1"
          ]
        },
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "SecurityGroups": [{
          "Ref": "WebServerSecurityGroup"
        }],
        "KeyName": {
          "Ref": "KeyName"
        },
        "Tags": [{
          "Key": "Name",
          "Value": {
            "Ref": "AWS::StackName"
          }
        }],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "", [
                "#!/bin/bash -xe\n",
                "source /home/ubuntu/.bashrc\n",
                "export HOME=/home/ubuntu\n",
                "apt-get update\n",
                "apt-get install -y git software-properties-common python-pip\n",
                "apt-add-repository -y ppa:ansible/ansible\n",
                "apt-get update && apt-get install -y ansible\n",
                "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "git clone https://github.com/OpenVidu/openvidu-cloud-devops /opt/workdir\n",
                "pushd /opt/workdir/cloudformation-openvidu\n",
                "WORKINGDIR=/opt/workdir/cloudformation-openvidu\n",
                "PIP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)\n",
                "PublicHostname=$(curl http://169.254.169.254/latest/meta-data/public-hostname)\n",
                "OPENVIDU_VERSION=2.6.0\n",
                "OPENVIDU_DEMOS_VERSION=2.6.0\n",
                "OPENVIDU_CALL_VERSION=2.6.0\n",
                "# install docker\n",
                "ansible-galaxy install geerlingguy.docker\n",
                "# install mysql\n",
                "ansible-galaxy install geerlingguy.mysql\n",
                "# Changes in group vars\n",
                "sed -i \"s/whichcert: selfsigned/whichcert: ", { "Ref": "WhichCert" }, "/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/DOMAIN_NAME/", { "Ref": "MyDomainName" }, "/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/LETSENCRYPT_EMAIL/", { "Ref": "LetsEncryptEmail" }, "/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/OV_VERSION/$OPENVIDU_VERSION/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/MY_SECRET/", { "Ref": "OpenViduSecret" }, "/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/FREEHTTPACCESTORECORDINGVIDEOS/", { "Ref": "FreeHTTPAccesToRecordingVideos" }, "/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/allowsendinfo: true/allowsendinfo: ", { "Ref": "WantToSendInfo" }, "/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/AWS_EIP/$PIP/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/AWS_PUBLIC_HOSTNAME/$PublicHostname/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/run_ec2: false/run_ec2: true/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/OPENVIDURECORDINGNOTIFICATION/", { "Ref": "OpenviduRecordingNotification" }, "/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/OPENVIDUSTREAMSVIDEOMAX-RECV-BANDWIDTH/", { "Ref": "OpenviduStreamsVideoMaxRecvBandwidth" }, "/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/OPENVIDUSTREAMSVIDEOMIN-RECV-BANDWIDTH/", { "Ref": "OpenviduStreamsVideoMinRecvBandwidth" }, "/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/OPENVIDUSTREAMSVIDEOMAX-SEND-BANDWIDTH/", { "Ref": "OpenviduStreamsVideoMaxSendBandwidth" }, "/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/OPENVIDUSTREAMSVIDEOMIN-SEND-BANDWIDTH/", { "Ref": "OpenviduStreamsVideoMinSendBandwidth" }, "/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/WANTDEMOS/", { "Ref": "WantToDeployDemos" }, "/\" $WORKINGDIR/group_vars/all\n",
                "sed -i \"s/DEMOS_VERSION/$OPENVIDU_DEMOS_VERSION/\" $WORKINGDIR/group_vars/all\n",                
                "sed -i \"s/OVC_VERSION/$OPENVIDU_CALL_VERSION/\" $WORKINGDIR/group_vars/all\n",
                "# OwnCerts changes\n",
                "echo ", { "Ref": "OwnCertCRT" }, " > $WORKINGDIR/roles/nginx/files/nginx.crt\n",
                "sed -i \"s/BEGIN CERTIFICATE/BEGINCERTIFICATE/\" $WORKINGDIR/roles/nginx/files/nginx.crt\n",
                "sed -i \"s/END CERTIFICATE/ENDCERTIFICATE/\" $WORKINGDIR/roles/nginx/files/nginx.crt\n",
                "sed -i \"s/ /\\n/g\" $WORKINGDIR/roles/nginx/files/nginx.crt\n",
                "sed -i \"s/BEGINCERTIFICATE/BEGIN CERTIFICATE/\" $WORKINGDIR/roles/nginx/files/nginx.crt\n",
                "sed -i \"s/ENDCERTIFICATE/END CERTIFICATE/\" $WORKINGDIR/roles/nginx/files/nginx.crt\n",
                "echo ", { "Ref": "OwnCertKEY" }, " > $WORKINGDIR/roles/nginx/files/nginx.key\n",
                "sed -i \"s/BEGIN RSA PRIVATE KEY/BEGINRSAPRIVATEKEY/\" $WORKINGDIR/roles/nginx/files/nginx.key\n",
                "sed -i \"s/BEGIN PRIVATE KEY/BEGINPRIVATEKEY/\" $WORKINGDIR/roles/nginx/files/nginx.key\n",
                "sed -i \"s/END RSA PRIVATE KEY/ENDRSAPRIVATEKEY/\" $WORKINGDIR/roles/nginx/files/nginx.key\n",
                "sed -i \"s/END PRIVATE KEY/ENDPRIVATEKEY/\" $WORKINGDIR/roles/nginx/files/nginx.key\n",
                "sed -i \"s/ /\\n/g\" $WORKINGDIR/roles/nginx/files/nginx.key\n",
                "sed -i \"s/BEGINRSAPRIVATEKEY/BEGIN RSA PRIVATE KEY/\" $WORKINGDIR/roles/nginx/files/nginx.key\n",
                "sed -i \"s/ENDRSAPRIVATEKEY/END RSA PRIVATE KEY/\" $WORKINGDIR/roles/nginx/files/nginx.key\n",
                "sed -i \"s/BEGINPRIVATEKEY/BEGIN PRIVATE KEY/\" $WORKINGDIR/roles/nginx/files/nginx.key\n",
                "sed -i \"s/ENDPRIVATEKEY/END PRIVATE KEY/\" $WORKINGDIR/roles/nginx/files/nginx.key\n",
                "ansible-playbook -i \"localhost,\" -c local play.yml\n",
                "popd\n",
                "/usr/local/bin/check_app_ready.sh\n",
                "/usr/local/bin/cfn-signal -e $? --stack ", {
                  "Ref": "AWS::StackName"
                }, " --resource WaitCondition --region ", {
                  "Ref": "AWS::Region"
                }, "\n"
              ]
            ]
          }
        },
        "BlockDeviceMappings": [{
          "DeviceName": "/dev/sda1",
          "Ebs": {
            "VolumeType": "io1",
            "Iops": "200",
            "DeleteOnTermination": "true",
            "VolumeSize": "100"
          }
        }]
      }
    },
    "MyEIP": {
      "Type": "AWS::EC2::EIPAssociation",
      "Condition": "NoSelfSigned",
      "Properties": {
        "InstanceId": {
          "Ref": "WebServerInstance"
        },
        "EIP": {
          "Ref": "PublicElasticIP"
        }
      }
    },
    "WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT15M",
          "Count": "1"
        }
      }
    },
    "WebServerSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Full open access",
        "SecurityGroupIngress": [{
            "IpProtocol": "udp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "0",
            "ToPort": "65535",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    }
  },
  "Outputs": {
    "WebsiteURL": {
      "Description": "Use this URL to connect OpenVidu",
      "Value": {
        "Fn::Join": [
          "", [
            "https://",
            {
              "Fn::GetAtt": [
                "WebServerInstance",
                "PublicDnsName"
              ]
            },
            ":4443"
          ]
        ]
      }
    },
    "WebsiteURLLE": {
      "Description": "Use this URL to connect to OpenVidu",
      "Value": {
        "Fn::Join": [
          "", [
            "https://",
            {
              "Ref": "MyDomainName"
            },
            ":4443"
          ]
        ]
      },
      "Condition": "NoSelfSigned"
    },
    "DemosURL": {
      "Description": "If you choose to deploy the demos you can access througt this",
      "Value": {
        "Fn::Join": [
          "", [
            "https://",
            {
              "Fn::GetAtt": [
                "WebServerInstance",
                "PublicDnsName"
              ]
            }
          ]
        ]
      }
    },
    "DemosURLLE": {
      "Description": "If you choose to deploy the demos with your own DNS name you can access througt this",
      "Value": {
        "Fn::Join": [
          "", [
            "https://",
            {
              "Fn::GetAtt": [
                "WebServerInstance",
                "PublicDnsName"
              ]
            }
          ]
        ]
      },
      "Condition": "NoSelfSigned"
    }
  }
}
