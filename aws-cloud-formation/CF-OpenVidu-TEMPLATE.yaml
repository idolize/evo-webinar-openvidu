AWSTemplateFormatVersion: 2010-09-09
Description: Deploying OpenVidu Server over AWS

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: Demos Machine EC2 instance type
    Type: String
    Default: t2.xlarge
    AllowedValues:
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5d.xlarge
      - c5d.2xlarge
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  MyDomainName:
    Description: "For example: openvidu.io"
    Type: String
  PublicElasticIP:
    Description: "In case you want to use Let's Encrypt, the Elastic IP you generated"
    Type: String
  OpenViduSecret:
    Description: >-
      Secret to connect to your OpenVidu Server. No whitespaces or quotations allowed. 
      If you deploy the demos the password must be MY_SECRET or the demos won't be able to connect to server.
    Type: String
    Default: MY_SECRET
    AllowedPattern: ^((?!")(?! ).)*$
    NoEcho: true
  WhichCert:
    Description: You can choose from the list below which certificate to use
    Type: String
    Default: selfsigned
    AllowedValues:
      - selfsigned
      - letsencrypt
      - owncert
  LetsEncryptEmail:
    Description: Email necesary for Let's Encrypt notifications
    Type: String
  OwnCertCRT:
    Description: URL to the CRT file
    Type: String
  OwnCertKEY:
    Description: URL to the KEY file
    Type: String
  WantToSendInfo:
    Description: Do you agree to send anonymous information to OpenVidu Team for statistics
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  FreeHTTPAccesToRecordingVideos:
    Description: Do you want your recordings to be access publicly?
    Type: String
    Default: 'false'
    AllowedValues:
      - 'true'
      - 'false'
  OpenviduRecordingNotification:
    Description: >-
      Which users should receive the recording events in the client side
      (recordingStarted, recordingStopped).
    Type: String
    Default: publisher_moderator
    AllowedValues:
      - all
      - publisher_moderator
      - moderator
      - none
  OpenviduStreamsVideoMaxRecvBandwidth:
    Description: >-
      Maximum video bandwidth sent from clients to OpenVidu Server, in kbps. 0
      means unconstrained
    Type: String
    Default: '1000'
  OpenviduStreamsVideoMinRecvBandwidth:
    Description: >-
      Minimum video bandwidth sent from clients to OpenVidu Server, in kbps. 0
      means unconstrained
    Type: String
    Default: '300'
  OpenviduStreamsVideoMaxSendBandwidth:
    Description: >-
      Maximum video bandwidth sent from OpenVidu Server to clients, in kbps. 0
      means unconstrained
    Type: String
    Default: '1000'
  OpenviduStreamsVideoMinSendBandwidth:
    Description: >-
      Minimum video bandwidth sent from OpenVidu Server to clients, in kbps. 0
      means unconstrained
    Type: String
    Default: '300'
  WantToDeployDemos:
    Description: >-
      Choose if you want to deploy practical examples of OpenVidu functionality.
    Type: String
    AllowedValues:
      - true
      - false
    Default: false

Mappings:
  RegionMap:
    eu-north-1:
      AMI: ami-09d25a77
    ap-south-1:
      AMI: ami-0f4ab593bd4e5b352
    eu-west-3:
      AMI: ami-0acfe51b617393c70
    eu-west-2:
      AMI: ami-021202ee82d116ad0
    eu-west-1:
      AMI: ami-0e219142c0bee4a6e
    ap-northeast-2:
      AMI: ami-04ca5d9535faed24a
    ap-northeast-1:
      AMI: ami-097beac0bacfefe65
    sa-east-1:
      AMI: ami-058732e2bf6d7acb4
    ca-central-1:
      AMI: ami-040bf52a85a5b3f6c
    ap-southeast-1:
      AMI: ami-0f9f33c210de47b63
    ap-southeast-2:
      AMI: ami-074a2888bf09cab0a
    eu-central-1:
      AMI: ami-05710338b6a5013d1
    us-east-1:
      AMI: ami-028d6461780695a43
    us-east-2:
      AMI: ami-0dae3d101cd772fae
    us-west-1:
      AMI: ami-069339bea0125f50d
    us-west-2:
      AMI: ami-09b42c38b449cfa59

Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: SSL Certificate Configuration
        Parameters:
          - WhichCert
          - LetsEncryptEmail
          - MyDomainName
          - PublicElasticIP
          - OwnCertCRT
          - OwnCertKEY
      - Label:
          default: OpenVidu Configuration
        Parameters:
          - OpenViduSecret
          - FreeHTTPAccesToRecordingVideos
          - OpenviduRecordingNotification
          - OpenviduStreamsVideoMaxRecvBandwidth
          - OpenviduStreamsVideoMinRecvBandwidth
          - OpenviduStreamsVideoMaxSendBandwidth
          - OpenviduStreamsVideoMinSendBandwidth
          - WantToDeployDemos

Conditions:
  NoSelfSigned: !Not 
    - !Equals 
      - !Ref WhichCert
      - selfsigned

Resources:
  OpenviduServer:
    Type: 'AWS::EC2::Instance'
    Metadata:
      Comment: 'Install and configure OpenVidu Server and Demos'
      AWS::CloudFormation::Init:
        config:
          files:
            '/usr/local/bin/installAnsible.sh':
              content: !Sub |
                #!/bin/bash
                apt-add-repository -y ppa:ansible/ansible
                apt-get update && apt-get install -y ansible
                ansible-galaxy install -p /etc/ansible/roles geerlingguy.docker
                ansible-galaxy install -p /etc/ansible/roles geerlingguy.mysql
              mode: "000755"
              owner: "root"
              group: "root"
            '/usr/local/bin/cloneRepo.sh':
              content: |
                #!/bin/bash
                git clone https://github.com/OpenVidu/openvidu-cloud-devops /usr/src/openvidu
                cd /usr/src/openvidu/cloudformation-openvidu
                git checkout @CF_V@
              mode: "000755"
              owner: "root"
              group: "root"
            '/usr/local/bin/getPublicInfo.sh':
              content: |
                #!/bin/bash
                WORKINGDIR=/usr/src/openvidu/cloudformation-openvidu
                PIP=$(curl http://169.254.169.254/latest/meta-data/public-ipv4)
                PublicHostname=$(curl http://169.254.169.254/latest/meta-data/public-hostname)
                sed -i "s/AWS_EIP/$PIP/" $WORKINGDIR/group_vars/all
                sed -i "s/AWS_PUBLIC_HOSTNAME/$PublicHostname/" $WORKINGDIR/group_vars/all
              mode: "000755"
              owner: "root"
              group: "root"
            '/usr/local/bin/feedGroupVars.sh':
              content: !Sub |
                #!/bin/bash
                WORKINGDIR=/usr/src/openvidu/cloudformation-openvidu
                OPENVIDU_VERSION=@OV_V@
                OPENVIDU_DEMOS_VERSION=@OVD_V@
                OPENVIDU_CALL_VERSION=@OVC_V@
                sed -i "s/OV_VERSION/$OPENVIDU_VERSION/" $WORKINGDIR/group_vars/all
                sed -i "s/DEMOS_VERSION/$OPENVIDU_DEMOS_VERSION/" $WORKINGDIR/group_vars/all
                sed -i "s/OVC_VERSION/$OPENVIDU_CALL_VERSION/" $WORKINGDIR/group_vars/all
                sed -i "s/WANTDEMOS/${WantToDeployDemos}/" $WORKINGDIR/group_vars/all
                sed -i "s/whichcert: selfsigned/whichcert: ${WhichCert}/" $WORKINGDIR/group_vars/all
                sed -i "s/DOMAIN_NAME/${MyDomainName}/" $WORKINGDIR/group_vars/all
                sed -i "s/LETSENCRYPT_EMAIL/${LetsEncryptEmail}/" $WORKINGDIR/group_vars/all
                sed -i "s/MY_SECRET/${OpenViduSecret}/" $WORKINGDIR/group_vars/all
                sed -i "s/run_ec2: false/run_ec2: true/" $WORKINGDIR/group_vars/all
                sed -i "s/allowsendinfo: true/allowsendinfo: ${WantToSendInfo}/" $WORKINGDIR/group_vars/all             
                sed -i "s/FREEHTTPACCESTORECORDINGVIDEOS/${FreeHTTPAccesToRecordingVideos}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDURECORDINGNOTIFICATION/${OpenviduRecordingNotification}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMAX-RECV-BANDWIDTH/${OpenviduStreamsVideoMaxRecvBandwidth}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMIN-RECV-BANDWIDTH/${OpenviduStreamsVideoMinRecvBandwidth}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMAX-SEND-BANDWIDTH/${OpenviduStreamsVideoMaxSendBandwidth}/" $WORKINGDIR/group_vars/all
                sed -i "s/OPENVIDUSTREAMSVIDEOMIN-SEND-BANDWIDTH/${OpenviduStreamsVideoMinSendBandwidth}/" $WORKINGDIR/group_vars/all
              mode: "000755"
              owner: "root"
              group: "root"
            '/usr/local/bin/buildCerts.sh':
              content: !Sub |
                #!/bin/bash -x
                WORKINGDIR=/usr/src/openvidu/cloudformation-openvidu
                wget -O $WORKINGDIR/roles/nginx/files/nginx.crt ${OwnCertCRT}
                wget -O $WORKINGDIR/roles/nginx/files/nginx.key ${OwnCertKEY}
              mode: "000755"
              owner: "root"
              group: "root"
    Properties:
      ImageId: !FindInMap 
        - RegionMap
        - !Ref 'AWS::Region'
        - AMI
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -eu -o pipefail

          apt-get update
          apt-get install -y git software-properties-common python-pip

          pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz

          cfn-init --region ${AWS::Region} --stack ${AWS::StackId} --resource OpenviduServer

          /usr/local/bin/installAnsible.sh || { echo "[Openvidu] Can't install ansible"; exit 1; } 
          /usr/local/bin/cloneRepo.sh || { echo "[Openvidu] Can't clone the repo"; exit 1; } 
          /usr/local/bin/getPublicInfo.sh || { echo "[Openvidu] Network problem"; exit 1; }
          /usr/local/bin/feedGroupVars.sh || { echo "[Openvidu] Parameters incorrect/insufficient"; exit 1; }
          if [ "${WhichCert}" == "owncert" ]; then
            /usr/local/bin/buildCerts.sh || { echo "[Openvidu] error with the certificate files"; exit 1; }
          fi
          source /home/ubuntu/.bashrc
          export HOME=/home/ubuntu
          
          pushd /usr/src/openvidu/cloudformation-openvidu
          ansible-playbook -i "localhost," -c local play.yml
          popd

          # sending the finish call
          /usr/local/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource WaitCondition --region ${AWS::Region}

      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeType: io1
            Iops: '200'
            DeleteOnTermination: 'true'
            VolumeSize: '100'
  
  MyEIP:
    Type: 'AWS::EC2::EIPAssociation'
    Condition: NoSelfSigned
    Properties:
      InstanceId: !Ref OpenviduServer
      EIP: !Ref PublicElasticIP
  
  WaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
        Count: '1'
  
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: SSH, Proxy and OpenVidu WebRTC Ports
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 4443
          ToPort: 4443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5443
          ToPort: 5443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3478
          ToPort: 3478
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5001
          ToPort: 5001
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: udp
          FromPort: 49152
          ToPort: 65535
          CidrIp: 0.0.0.0/0

Outputs:
  WebsiteURL:
    Description: Use this URL to connect OpenVidu Server
    Value: !Join 
      - ''
      - - 'https://'
        - !GetAtt 
          - OpenviduServer
          - PublicDnsName
        - ':4443'
  WebsiteURLLE:
    Description: Use this URL to connect to OpenVidu
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref MyDomainName
        - ':4443'
    Condition: NoSelfSigned
  DemosURL:
    Description: If you choose to deploy the demos you can access througt this
    Value: !Join
      - ''
      - - 'https://'
        - !GetAtt
          - OpenviduServer
          - PublicDnsName
  DemosURLLE:
    Description: If you choose to deploy the demos with your own DNS name you can access througt this
    Value: !Join 
      - ''
      - - 'https://'
        - !Ref MyDomainName
    Condition: NoSelfSigned

